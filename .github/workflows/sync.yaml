name: Sync Helm charts from source repo releases

on:
  schedule:
  - cron: "0 0 * * *"
  push:
    branches:
    - main
  workflow_dispatch:

permissions:
  contents: write # need write permission to push chart files + index

env:
  SOURCE_REPO: "freiheit-com/kuberpult"
  TARGET_BRANCH: "gh-pages"
  PAGES_URL: "https://raw.githubusercontent.com/jonas-budde/kuberpult-private-helm-repository/gh-pages/"

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ ENV.TARGET_BRANCH }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install prerequisites (jq, curl, git)
        run: sudo apt-get update && sudo apt-get install -y jq curl git

      - name: Install Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Fetch releases list from source repo
        run: |
          set -euo pipefail
          # list releases (latest first)
          releases_json=$(curl -s "https://api.github.com/repos/${SOURCE_REPO}/releases")
          echo "$releases_json" | jq 'map(select(.draft == false and .prerelease == false))' > /tmp/releases.json
          jq -r '.[0:20] | .[] | "\(.tag_name) (prerelease=\(.prerelease) draft=\(.draft))"' /tmp/releases.json

      # charts dir must be root, see: https://github.com/helm/chart-releaser-action/issues/52#issuecomment-1090782723
      - name: Download release .tgz assets -> repo root and update root index.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Validate releases json exists
          if [ ! -f /tmp/releases.json ]; then
            echo "/tmp/releases.json not found. Ensure previous step created it."
            exit 1
          fi

          echo "Building asset list (only .tgz assets)..."
          # lines: "<url><TAB><name>"
          jq -r '.[] | .assets[]? | select(.name | test("\\.tgz$")) | "\(.browser_download_url)\t\(.name)"' /tmp/releases.json > /tmp/assets.list || true

          if [ ! -s /tmp/assets.list ]; then
            echo "No .tgz assets found in /tmp/releases.json"
          else
            echo "Downloading assets into repo root (skipping already-present files)..."
            download_asset() {
              local url="$1"; local out="$2"
              curl -sS -L -H "Accept: application/octet-stream" -o "${out}" "${url}"
            }

            while IFS=$'\t' read -r url name || [ -n "$url" ]; do
              [ -z "$url" ] && continue
              name=$(basename "$name")
              out="./${name}"
              if [ -f "${out}" ]; then
                echo "skip: ${name} (already present)"
              else
                echo "download: ${name}"
                download_asset "${url}" "${out}" || { echo "FAILED to download ${url}" >&2; exit 1; }
                # sanity
                if [ ! -s "${out}" ]; then
                  echo "Downloaded file is empty: ${out}" >&2
                  rm -f "${out}"
                  exit 1
                fi
              fi
            done < /tmp/assets.list
          fi
        
      - name: Update Helm Index
        run: |
          set -euo pipefail
          
          if [ -f index.yaml ]; then
            echo "Found existing root index.yaml — sanity checking..."
            if grep -q '^apiVersion:' index.yaml && grep -q '^entries:' index.yaml && ! grep -q '<html\|<head' index.yaml; then
              echo "existing index.yaml looks valid, attempting helm --merge"
              if helm repo index . --url "${PAGES_URL}" --merge index.yaml; then
                echo "Merge ok; replacing root index.yaml with generated index"
                mv index.yaml index.yaml.bak || true  # keep a backup if needed
                mv index.yaml.bak index.yaml 2>/dev/null || true
                # helm wrote ./index.yaml (overwriting previous), but to be explicit:
                mv index.yaml index.yaml 2>/dev/null || true
                # helm wrote ./index.yaml already; nothing else to do
              else
                echo "helm --merge failed. Showing first 200 lines of existing index for debugging:"
                head -n 200 index.yaml || true
                echo "Generating fresh index.yaml instead..."
                rm -f index.yaml
                helm repo index . --url "${PAGES_URL}"
              fi
            else
              echo "existing index.yaml failed basic sanity checks. Preview:"
              head -n 200 index.yaml || true
              rm -f index.yaml
              helm repo index . --url "${PAGES_URL}"
            fi
          else
            echo "No existing index.yaml found — generating new root index.yaml"
            helm repo index . --url "${PAGES_URL}"
          fi

          # Note: helm created ./index.yaml
          if [ ! -s index.yaml ] || ! grep -q '^apiVersion:' index.yaml; then
            echo "index.yaml looks invalid after generation. Dumping head for debug:"
            head -n 200 index.yaml || true
            exit 1
          fi

      - name: Add, commit & push changes if any
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add newly downloaded/updated *.tgz and index.yaml
          git add --force -- "*.tgz" index.yaml || true

          # Detect if there are staged changes
          if git diff --cached --quiet --exit-code; then
            echo "No changes to commit (no updated/added .tgz or index.yaml)."
          else
            git commit -m "chore(sync): update .tgz charts and index.yaml from ${SOURCE_REPO} ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))" || true

            # Push using token-authenticated remote so we can push to gh-pages (runner already on gh-pages)
            remote_url="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            echo "Pushing changes to gh-pages..."
            git push "${remote_url}" HEAD:gh-pages --follow-tags
            echo "Push complete."
          fi